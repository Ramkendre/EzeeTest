using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Data.SqlClient;
using System.ComponentModel;
using System.Collections.Generic;

public partial class SubAdmin_GridView : System.Web.UI.Page
{



    BindQuestionsToGridBAL objBindQuestionsToGridBAL = new BindQuestionsToGridBAL();

    int status, TotalQuetion, AddingQuestion;
    CommonCode cc = new CommonCode();
    TestDefinationBLL testDefBAL = new TestDefinationBLL();
    AssignQuestionInExamBAL assignQuestioninexamBal = new AssignQuestionInExamBAL();

    public static string Chapter_id = "";
    public static int TypeOFExam = 0;
    public static int Class_id = 0;
    public static int Subject_id = 0;
    public static string Subjectid = "";

    public DataSet dsStatic = null;
    public DataSet dsItemValue = null;

    string Sql = "";



    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            MultiView1.ActiveViewIndex = 0;
            loadTestName();
        }
    }

  


    int pageNumber, pageSize,startindex,endindex;
    public void BindGrid()
    {

        string s11 = Convert.ToString(Session["CompanyId"]) + "" + Convert.ToString(Session["TestID"]);

        string viewtblName = "tbll" + s11 + " ";
        Sql = "select count(*) from " + viewtblName + " ";
        string tempcount = cc.ExecuteScalar(Sql);
        if (Convert.ToInt32(tempcount) < 200)
            lblcount.Text = "Total Number of Question : " + tempcount;
        else
        {
            tempcount = "200";
            lblcount.Text = "Total Number of Question : " + tempcount;
        }

        if (ViewState["PageNumber"] != null)
            pageNumber = Convert.ToInt32(ViewState["PageNumber"].ToString());
        else
        {
            pageNumber = 1;
            startindex=1;
            endindex = 10;
        }

        if (pageNumber == 1)
        {
            pageNumber = 1;
            startindex = 1;
            endindex = 10;
        }

        pageSize = 10;
         
        if(pageNumber>1)
        {
            startindex = ((pageNumber - 1) * pageSize) + 1;
          
            endindex=pageNumber*pageSize;
            if (Convert.ToInt32(tempcount) < endindex)
            {
                endindex = Convert.ToInt32(tempcount);
            }
        }






        Sql = "Select  NewQID," + viewtblName + ".SNO,Question,TypeofDB,Sellanguage,QType,tblItemValue.Name as TypeofQues From " + viewtblName + " inner join tblItemValue on " + viewtblName + ".TypeofQues=tblItemValue.ItemValueId  " +
            " where NewQID>=" + startindex + " and NewQID<="+endindex+" ";
        DataSet ds = cc.ExecuteDataset(Sql);

       //// DataSet ds = objBindQuestionsToGridBAL.BindQuestionsToGrid(objBindQuestionsToGridBAL);

        if (ds.Tables[0].Rows.Count > 0)
        {
            gvBindQuestions.DataSource = ds.Tables[0];
            gvBindQuestions.DataBind();
            gvBindQuestions.Visible = true;

           

            populatePager(Convert.ToInt32(tempcount), pageNumber, pageSize);
        }
    }



    private void populatePager(int total, int currentPage, int pageSize)
    {

        double pageCount = (double)((total) / pageSize);
        int pageNumber = (int)Math.Ceiling(pageCount);
        if ((total % pageSize) != 0)
            pageNumber++;

        List<ListItem> pages = new List<ListItem>();
        if (pageNumber > 0)
        {
            pages.Add(new ListItem("First", "1", currentPage > 1));
            for (int i = 2; i < pageNumber; i++)
                pages.Add(new ListItem(i.ToString(), i.ToString(), i != currentPage));
            pages.Add(new ListItem("Last", pageNumber.ToString(), currentPage < pageNumber));


        }
        rptPageNumber.DataSource = pages;
        rptPageNumber.DataBind();


    }


    public void PageChange_OnClick(object sender, EventArgs e)
    {
        LinkButton lnk = sender as LinkButton;
        lnk.ForeColor = System.Drawing.ColorTranslator.FromHtml("#5BB1E6");
        pageNumber = int.Parse((sender as LinkButton).CommandArgument);
        ViewState["PageNumber"] = pageNumber;

        BindGrid();
    }

  























    protected void gvBindQuestions_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //string sno =Convert.ToString((e.Row.Cells[1].Text));

            DataRowView row1 = e.Row.DataItem as DataRowView;
            string sno = Convert.ToString(row1[1]);
            string Question = Convert.ToString(row1[2]);
            string TypeofDB = Convert.ToString(row1[3]);
            string Sellanguage = Convert.ToString(row1[4]);
            string QType = Convert.ToString(row1[5]);
            //string TypeofDB = Convert.ToString((e.Row.Cells[2].Text));


            Label lbl = (Label)e.Row.FindControl("lblTextQuestion");
            Image img = (Image)e.Row.FindControl("imgQuestion");

            if (TypeofDB == "Access")
            {
                if (QType == "2")
                {
                    img.Visible = true;
                    lbl.Visible = false;

                    img.ImageUrl = "~/SubAdmin/GetGridImageHandler.ashx?SNO1= " + sno + ", Question";

                }
                else if (QType == "1")
                {


                    string s = Convert.ToString(Question);
                    s = s.Replace("@011", "'");
                    lbl.Text = s;
                    lbl.Visible = true;
                    lbl.Font.Name = "Shivaji01";
                    lbl.Font.Size = 14;
                    img.Visible = false;
                }
                else if (QType == "0")
                {
                    string s = Convert.ToString(Question);
                    s = s.Replace("@011", "'");
                    lbl.Text = s;

                    lbl.Visible = true;
                    lbl.Font.Name = "Times New Roman";
                    lbl.Font.Size = 12;
                    img.Visible = false;


                }
            }
            else
            {
                if (Sellanguage == "Marathi")
                {
                    string s = Convert.ToString(Question);
                    s = s.Replace("@011", "'");
                    lbl.Text = s;
                    lbl.Visible = true;
                    lbl.Font.Name = "Shivaji01";
                    lbl.Font.Size = 14;
                    img.Visible = false;
                }
                else
                {
                    string s = Convert.ToString(Question);
                    s = s.Replace("@011", "'");
                    lbl.Text = s;

                    lbl.Visible = true;
                    lbl.Font.Name = "Times New Roman";
                    lbl.Font.Size = 12;
                    img.Visible = false;

                }

            }

           // DataSet ds = objBindQuestionsToGridBAL.BindQuestionsToGrid(objBindQuestionsToGridBAL);

        }
    }


    public string QType = "";
    public string TypeDB = "", lang = "";







    protected void btnStart_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddltextName.SelectedIndex == ddltextName.Items.Count - 1)
            {
                ScriptManager.RegisterStartupScript(this, typeof(Page), "msg", "alert('Please Select Exam Name')", true);

            }
            else
            {
                string chapterID = "";
                Session["QuestionID"] = "";
                for (int c = 0; c < rdoLevelList1.Items.Count; c++)
                {
                    if (rdoLevelList1.Items[c].Selected == true)
                    {
                        chapterID = chapterID + "," + rdoLevelList1.Items[c].Value;

                    }
                }

                if (ddltextName.SelectedIndex == ddltextName.Items.Count - 1)
                {
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "alert", "alert('Please Select Exam Name')", true);

                }
                else if (cmbSelectsubject.SelectedIndex == cmbSelectsubject.Items.Count - 1)
                {
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "alert", "alert('Please Select Subject Name')", true);

                }
                else if (chapterID == "")
                {
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "alert", "alert('Please Select Chapter')", true);

                }
                else
                {
                    MultiView1.SetActiveView(View2);
                    QuesNo();
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    public void QuesNo()
    {
        try
        {
            string TypeOFExam = "", TypeofMaterial = "";


            testDefBAL.LoginId1 = Convert.ToString(Session["LoginId"]);  //use sp
            testDefBAL.Test_ID1 = Convert.ToInt32(ddltextName.SelectedValue);

            DataSet ds = testDefBAL.getAssignTestDetails(testDefBAL);

            if (ds.Tables[0].Rows.Count >= 1)
            {
                TypeOFExam = Convert.ToString(ds.Tables[0].Rows[0]["TypeOFExam"]);
                TypeofMaterial = Convert.ToString(ds.Tables[0].Rows[0]["TypeofMaterial"]);
                Class_id = Convert.ToInt32(ds.Tables[0].Rows[0]["Class_id"]);
                Subjectid = Convert.ToString(ds.Tables[0].Rows[0]["Subject_id"]);

                Sql = "select count(*) from dbo.tblAssignExamChapter where LoginId='" + Session["LoginId"] + "' and TestID=" + ddltextName.SelectedValue + " ";
                ds = cc.ExecuteDataset(Sql);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    Chapter_id = Convert.ToString(ddlChapter.SelectedValue);
                    string chapterID = "";
                    for (int c = 0; c < ddlChapter.Items.Count; c++)
                    {
                        if (ddlChapter.Items[c].Selected == true)
                        {
                            chapterID = chapterID + "," + ddlChapter.Items[c].Value;
                        }
                    }

                    if (chapterID.Length > 1)
                    {
                        chapterID = chapterID.Substring(1);
                    }

                    string s11 = Convert.ToString(Session["CompanyId"]) + "" + Convert.ToString(Session["TestID"]);
                    try
                    {
                        Sql = " drop view tbll" + s11 + "";
                        int i = cc.ExecuteNonQuery(Sql);
                    }
                    catch
                    {
                    }

                    if (Class_id == 1)
                    {
                        Sql = " CREATE   view tbll" + s11 + " as  " +
                              " Select ROW_NUMBER() OVER( ORDER BY Question_id) NewQID,  * " +
                              "    from " +
                              "   (select * from dbo.tblQuestionAccess where  TypeOFExam=" + TypeOFExam + " and (QuesVerify !='0' or QuesVerify is null) and QuestionLevel=" + rdoLevelList1.SelectedValue + "  and Subject_id =" + cmbSelectsubject.SelectedValue + "   )  as MyResults ";
                        if (chapterID != "")
                            Sql = " CREATE   view tbll" + s11 + " as  " +
                                  " Select ROW_NUMBER() OVER( ORDER BY Question_id) NewQID,  * " +
                                  "    from " +
                                  "   (select * from dbo.tblQuestionAccess where  TypeOFExam=" + TypeOFExam + " and (QuesVerify !='0' or QuesVerify is null) and QuestionLevel=" + rdoLevelList1.SelectedValue + "  and Subject_id =" + cmbSelectsubject.SelectedValue + " and Chapter_id in(" + chapterID + ") )  as MyResults ";
                    }
                    else
                    {
                        Sql = " CREATE   view tbll" + s11 + " as  " +
                             " Select ROW_NUMBER() OVER( ORDER BY Question_id) NewQID,  * " +
                             "    from " +
                             "   (select * from dbo.tblQuestionAccess where  TypeOFExam=" + TypeOFExam + " and (QuesVerify !='0' or QuesVerify is null) and QuestionLevel=" + rdoLevelList1.SelectedValue + " and Class_id=" + Class_id + " and Subject_id =" + cmbSelectsubject.SelectedValue + "   )  as MyResults ";
                        if (chapterID != "")
                            Sql = " CREATE   view tbll" + s11 + " as  " +
                                  " Select ROW_NUMBER() OVER( ORDER BY Question_id) NewQID,  * " +
                                  "    from " +
                                  "   (select * from dbo.tblQuestionAccess where  TypeOFExam=" + TypeOFExam + " and (QuesVerify !='0' or QuesVerify is null) and QuestionLevel=" + rdoLevelList1.SelectedValue + " and Class_id=" + Class_id + " and Subject_id =" + cmbSelectsubject.SelectedValue + " and Chapter_id in(" + chapterID + ") )  as MyResults ";

                    }

                    int k = cc.ExecuteNonQuery(Sql);



                    //string viewtblName = "tbll" + s11 + " ";
                    //Sql = "select count(*) from " + viewtblName + " ";
                    //string tempcount = cc.ExecuteScalar(Sql);
                    //lblcount.Text = "Total Number of Question : " + tempcount;

                    //assignQuestioninexamBal.ViewtblName1 = viewtblName;
                    //assignQuestioninexamBal.NewQID1 = 1;
                    //dsStatic = assignQuestioninexamBal.SelectQuestionAssignVIEW(assignQuestioninexamBal);

                    ////string sql = "select * from tbll" + s11 + ""; //view
                    ////dsStatic = cc.ExecuteDataset(sql);

                    ViewState["PageNumber"] = null;
                    GetTotal();
                        BindGrid();
                       
                  

                }
                else
                {
                    TypeOFExam = "";
                    Class_id = 0;
                    Subject_id = 0;
                    Chapter_id = "";
                    MultiView1.SetActiveView(View1);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "msg", "alert('Please Assign Chapter or Subject to Test Name')", true);

                }
            }
        }
        catch (Exception ex)
        {
        }
    }


    protected void btnAddQuestion_Click(object sender, EventArgs e)
    {
        try
        {

            string vv = Convert.ToString(ddltextName.SelectedValue);
            string gvSNO = "";
            for (int i = 0; i < gvBindQuestions.Rows.Count; i++)
            {
                CheckBox chkbox = (CheckBox)gvBindQuestions.Rows[i].Cells[4].FindControl("chk1");

                if (chkbox != null)
                {
                    if (chkbox.Checked == true)
                    {
                        gvSNO += Convert.ToString(gvBindQuestions.DataKeys[i].Value) + ",";

                    }
                }
                chkbox.Checked = false;
            }

            if (gvSNO == "")
            {
                ScriptManager.RegisterStartupScript(this, typeof(Page), "msg", "alert('Please select atleast one Question  !!!')", true);
            }
            else
            {

                if (gvSNO != "")
                {
                    gvSNO = gvSNO.Substring(0, gvSNO.Length - 1);
                }




                int TotalQuetion = Convert.ToInt32(Session["TotalQuetion"]);
                int AddingQuestion = Convert.ToInt32(Session["AddingQuestion"]);

                if (TotalQuetion >= AddingQuestion && TotalQuetion != AddingQuestion)
                {
                    int ExamType = 0;
                    string QuestionIDSet = gvSNO; 


                    testDefBAL.Test_ID1 = Convert.ToInt32(ddltextName.SelectedValue);
                    DataSet ds = testDefBAL.getLevelTestDef(testDefBAL);
                    // string SQl = "select  DLevel1 , DLevel2 , DLevel3 ,TypeOFExam from tblTestDefinition where Test_ID=" + ddltextName.SelectedValue + "";

                    if (ds.Tables[0].Rows.Count >= 1)
                    {
                        ExamType = Convert.ToInt32(ds.Tables[0].Rows[0]["TypeOFExam"]);
                        string s11 = "tbl" + Convert.ToString(Session["CompanyId"]) + "" + Convert.ToString(Session["TestID"]);
                        try
                        {
                            Sql = "select * from  " + s11 + " ";
                            status = cc.ExecuteNonQuery(Sql);
                        }
                        catch (Exception ex)
                        {

                        }
                        if (status != -1)
                        {
                            string queryString =
                                                @"
                CREATE TABLE MyTable
                (
                    [EQID] [int] IDENTITY(1,1) NOT NULL,
	[SNO] [int] NULL,
	[Question_id] [int] NOT NULL,
	[Question] [nvarchar](max) NULL,
	[QType] [int] NULL,
	[Answer1] [nvarchar](max) NULL,
	[AType] [int] NULL,
	[Answer2] [nvarchar](max) NULL,
	[BType] [int] NULL,
	[Answer3] [nvarchar](max) NULL,
	[CType] [int] NULL,
	[Answer4] [nvarchar](max) NULL,
	[DType] [int] NULL,
	[OptionE] [nvarchar](max) NULL,
	[EType] [int] NULL,
	[OptionP] [nvarchar](max) NULL,
	[PType] [int] NULL,
	[OptionQ] [nvarchar](max) NULL,
	[QType1] [int] NULL,
	[OptionR] [nvarchar](max) NULL,
	[RType] [int] NULL,
	[OptionS] [nvarchar](max) NULL,
	[SType] [int] NULL,
	[OptionT] [nvarchar](max) NULL,
	[TType] [int] NULL,
	[Passage] [nvarchar](max) NULL,
	[passageType] [int] NULL,
	[QuesWithImage] [nvarchar](max) NULL,
	[Q1Type] [int] NULL,
	[Qhint] [nvarchar](max) NULL,
	[hType] [int] NULL,
	[Correct_answer] [nvarchar](50) NULL,
	[QuestionLevel] [int] NULL,
	[MobileNo] [nvarchar](15) NULL,
	[SettingId] [int] NULL,
	[changeDate] [nvarchar](50) NULL,
	[Ischecked] [int] NULL,
	[TypeOFExam] [int] NULL,
	[TypeofQues] [int] NULL,
	[Class_id] [int] NULL,
	[Subject_id] [int] NULL,
	[Chapter_id] [int] NULL,
	[Topic_id] [int] NULL,
	[QuesVerify] [nvarchar](4) NULL,
	[Suggestion] [nvarchar](max) NULL,
	[UploaderMoNo] [nvarchar](12) NULL,
	[UniqueId] [int] NULL,
	[DOUpload] [nvarchar](22) NULL,
	[LoginId] [nvarchar](50) NULL,
	[checkerLoginId] [nvarchar](50) NULL,
	[Test_ID] [int] NULL,
	[Image] [nvarchar](max) NULL,
	[MediumID] [nvarchar](50) NULL,
	[Sellanguage] [nvarchar](50) NULL,
	[userClass_id] [nvarchar](40) NULL,
	[userSubject_id] [nvarchar](50) NULL,
	[userChapter_id] [nvarchar](40) NULL,
	[userTopic_id] [nvarchar](40) NULL,
	[userCompitativeExam] [nvarchar](50) NULL,
	[TypeofMaterial] [nvarchar](40) NULL,
	[TypeofDB] [nvarchar](10) NULL,
	[examQwener] [nvarchar](50) NULL,
	[flag] [int] NULL,
	[createdate] [datetime] NULL,
	[UploadFileName] [nvarchar](200) NULL,
	[Class_AdmVerify] [nvarchar](9) NULL,
	[Class_AdmSuggest] [nvarchar](200) NULL,
	[Class_AdmLogin] [nvarchar](50) NULL,
	[PublicationName] [nvarchar](200) NULL,
                 CONSTRAINT [PK_MyTable] PRIMARY KEY CLUSTERED 
                (
	                [EQID] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [QAccess5] ON [dbo].[MyTable] 
(
	[TypeofMaterial] ASC,
	[TypeOFExam] ASC,
	[Class_id] ASC,
	[Subject_id] ASC,
	[Chapter_id] ASC,
	[TypeofDB] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ";

                            queryString = queryString.Replace("MyTable", s11);

                            status = cc.ExecuteNonQuery(queryString);
                        }
                        if (status == -1)
                        {
                            Sql = "insert into " + s11 + " " +
                               " SELECT  * FROM tblQuestionAccess " +
                               " where  SNO not in ( select SNo from " + s11 + " ) and sno in (" + QuestionIDSet + ")";

                            int status1 = cc.ExecuteNonQuery(Sql);
                            if (status1 >= 1)
                            {
                                GetTotal();
                                ScriptManager.RegisterStartupScript(this, typeof(Page), "alert", "alert(' " + status1 + " Question Added Successfully')", true);
                                ScriptManager.RegisterStartupScript(this, typeof(Page), "alert", "msg(' " + status1 + " Question Added Successfully')", true);

                            }
                            else
                            {
                                ScriptManager.RegisterStartupScript(this, typeof(Page), "alert", "alert('Selected Question Already Exist.');", true);
                               
                              

                            }
                        }

                    }

                    else
                    {
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "alert", "alert('Sorry No Question Added !!!')", true);
                    }

                }
                else
                {
                    GetTotal();
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "alert", "alert('Sorry You not Add More Than Total Question Count. !!!')", true);
                }
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void GetTotal()  // calculated Number of Question assign for lavel 1,2,3 and remaining Question
    {
        try
        {
            int DLevel1 = 0, DLevel2 = 0, DLevel3 = 0, Total = 0, TypeOFExam = 0;
            int ALevel1 = 0, ALevel2 = 0, ALevel3 = 0, ATotal1 = 0;
            int RLevel1 = 0, RLevel2 = 0, RLevel3 = 0, RTotal1 = 0;

            testDefBAL.Test_ID1 = Convert.ToInt32(Session["testid"]);
            DataSet ds = testDefBAL.getLevelTestDef(testDefBAL);

            //string SQl = "select  DLevel1 , DLevel2 , DLevel3 ,TypeOFExam from dbo.tblTestDefinition where Test_ID=" + Convert.ToString(Session["testid"]) + "";

            if (ds.Tables[0].Rows.Count >= 1)
            {
                DLevel1 = Convert.ToInt32(ds.Tables[0].Rows[0]["DLevel1"]);
                DLevel2 = Convert.ToInt32(ds.Tables[0].Rows[0]["DLevel2"]);
                DLevel3 = Convert.ToInt32(ds.Tables[0].Rows[0]["DLevel3"]);
                TypeOFExam = Convert.ToInt32(ds.Tables[0].Rows[0]["TypeOFExam"]);

                string s11 = "tbl" + Convert.ToString(Session["CompanyId"]) + "" + Convert.ToString(Session["TestID"]);
                try
                {
                    Sql = "select * from  " + s11 + " ";
                    status = cc.ExecuteNonQuery(Sql);
                }
                catch (Exception ex)
                {
                }
                if (status != -1)
                {
                    string queryString =
                                        @"
                CREATE TABLE MyTable
                (
                    [EQID] [int] IDENTITY(1,1) NOT NULL,
	                [SNO] [int] NULL,
	                [Question_id] [int] NOT NULL,
	                [Question] [nvarchar](max) NULL,
	                [QType] [int] NULL,
	                [Answer1] [nvarchar](max) NULL,
	                [AType] [int] NULL,
	                [Answer2] [nvarchar](max) NULL,
	                [BType] [int] NULL,
	                [Answer3] [nvarchar](max) NULL,
	                [CType] [int] NULL,
	                [Answer4] [nvarchar](max) NULL,
	                [DType] [int] NULL,
	                [OptionE] [nvarchar](max) NULL,
	                [EType] [int] NULL,
	                [OptionP] [nvarchar](max) NULL,
	                [PType] [int] NULL,
	                [OptionQ] [nvarchar](max) NULL,
	                [QType1] [int] NULL,
	                [OptionR] [nvarchar](max) NULL,
	                [RType] [int] NULL,
	                [OptionS] [nvarchar](max) NULL,
	                [SType] [int] NULL,
	                [OptionT] [nvarchar](max) NULL,
	                [TType] [int] NULL,
	                [Passage] [nvarchar](max) NULL,
	                [passageType] [int] NULL,
	                [QuesWithImage] [nvarchar](max) NULL,
	                [Q1Type] [int] NULL,
	                [Qhint] [nvarchar](max) NULL,
	                [hType] [int] NULL,
	                [Correct_answer] [nvarchar](50) NULL,
	                [QuestionLevel] [int] NULL,
	                [MobileNo] [nvarchar](15) NULL,
	                [SettingId] [int] NULL,
	                [changeDate] [nvarchar](50) NULL,
	                [Ischecked] [int] NULL,
	                [TypeOFExam] [int] NULL,
	                [TypeofQues] [int] NULL,
	                [Class_id] [int] NULL,
	                [Subject_id] [int] NULL,
	                [Chapter_id] [int] NULL,
	                [Topic_id] [int] NULL,
	                [QuesVerify] [nvarchar](4) NULL,
	                [Suggestion] [nvarchar](max) NULL,
	                [UploaderMoNo] [nvarchar](12) NULL,
	                [UniqueId] [int] NULL,
	                [DOUpload] [nvarchar](22) NULL,
	                [LoginId] [nvarchar](50) NULL,
	                [checkerLoginId] [nvarchar](50) NULL,
	                [Test_ID] [int] NULL,
	                [Image] [nvarchar](max) NULL,
	                [MediumID] [nvarchar](50) NULL,
	                [Sellanguage] [nvarchar](50) NULL,
	                [userClass_id] [nvarchar](40) NULL,
	                [userSubject_id] [nvarchar](50) NULL,
	                [userChapter_id] [nvarchar](40) NULL,
	                [userTopic_id] [nvarchar](40) NULL,
	                [userCompitativeExam] [nvarchar](50) NULL,
	                [TypeofMaterial] [nvarchar](40) NULL,
	                [TypeofDB] [nvarchar](10) NULL,
	                [examQwener] [nvarchar](50) NULL,
                    [flag] [int] NULL,                   
	                [createdate] [datetime] NULL,
                    [UploadFileName] [nvarchar](200) NULL,
                    [Class_AdmVerify][nvarchar](9) NULL,
                    [Class_AdmSuggest][nvarchar](200) NULL,
                    [Class_AdmLogin][nvarchar](50) NULL,
                    [PublicationName][nvarchar](200) null,
                 CONSTRAINT [PK_MyTable] PRIMARY KEY CLUSTERED 
                (
	                [EQID] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]

CREATE NONCLUSTERED INDEX [QAccess5] ON [dbo].[MyTable] 
(
	[TypeofMaterial] ASC,
	[TypeOFExam] ASC,
	[Class_id] ASC,
	[Subject_id] ASC,
	[Chapter_id] ASC,
	[TypeofDB] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

                ";

                    queryString = queryString.Replace("MyTable", s11);

                    status = cc.ExecuteNonQuery(queryString);
                }
                string SQl = "Select count(QuestionLevel) as L1 from MyTable where QuestionLevel=1 " +
                    " Select count(QuestionLevel) as L2  from MyTable where QuestionLevel=2 " +
                    " Select count(QuestionLevel) as L3  from MyTable where QuestionLevel=3 ";


                string s12 = "tbl" + Convert.ToString(Session["CompanyId"]) + "" + Convert.ToString(Session["TestID"]);

                SQl = SQl.Replace("MyTable", s12);


                DataSet ds1 = cc.ExecuteDataset(SQl);
                if (ds1.Tables[0].Rows.Count >= 1 || ds1.Tables[1].Rows.Count >= 1 || ds1.Tables[2].Rows.Count >= 1)
                {
                    ALevel1 = Convert.ToInt32(ds1.Tables[0].Rows[0]["L1"]);
                    ALevel2 = Convert.ToInt32(ds1.Tables[1].Rows[0]["L2"]);
                    ALevel3 = Convert.ToInt32(ds1.Tables[2].Rows[0]["L3"]);
                }



                //}
                Total = DLevel1 + DLevel2 + DLevel3;
                ATotal1 = ALevel1 + ALevel2 + ALevel3;
                RLevel1 = DLevel1 - ALevel1;
                RLevel2 = DLevel2 - ALevel2;
                RLevel3 = DLevel3 - ALevel3;
                RTotal1 = RLevel1 + RLevel2 + RLevel3;
                Session["TotalQuetion"] = Total;
                Session["AddingQuestion"] = ATotal1;
                lblt1.Text = "Total Questions In Exam= " + Total;
                lblt1.Visible = true;
                lblt2.Text = "Total Questions added in Exam=" + ATotal1;
                lblt2.Visible = true;
                lblt3.Text = "Questions Remaining to be added= " + RTotal1;
                lblt3.Visible = true;


                pnl1.Visible = true;
                lblTotalQNo.Text = "Total Questions In Exam= " + Total + " (Level1 + Level2 + Level3 =" + DLevel1 + "+" + DLevel2 + "+" + DLevel3 + ")";
                lblAvailable.Text = "Total Questions added in Exam= " + ATotal1 + " (Level1 + Level2 + Level3 =" + ALevel1 + "+" + ALevel2 + "+" + ALevel3 + ")";
                lblRemaininhg.Text = "Questions Remaining to be added= " + RTotal1 + " (Level1 + Level2 + Level3 =" + RLevel1 + "+" + RLevel2 + "+" + RLevel3 + ")";


            }
            else
            {
                pnl1.Visible = false;
            }


        }
        catch (Exception ex)
        {
            throw ex;
        }
    }



    protected void ddltextName_SelectedIndexChanged(object sender, EventArgs e)
    {
        loadSubject(ddltextName.SelectedValue);
    }
    private void loadSubject(string test)
    {
        if (ddltextName.SelectedItem.Text == "--Select--")
        {
            ScriptManager.RegisterStartupScript(this, typeof(Page), "msg", "alert('Please Select Exam Name')", true);

        }
        else
        {

            DataSet ds = testDefBAL.loadsubject(test); // load all test under test definition

            if (ds.Tables[0].Rows.Count > 0)
            {
                cmbSelectsubject.DataSource = ds.Tables[0];
                cmbSelectsubject.DataTextField = "Name";
                cmbSelectsubject.DataValueField = "ItemValueId";
                cmbSelectsubject.DataBind();
                cmbSelectsubject.Items.Add("--Select--");
                cmbSelectsubject.SelectedIndex = cmbSelectsubject.Items.Count - 1;
                Session["TestID"] = test;
            }
            else
            {
                Session["TestID"] = "dummy";
            }
        }

    }
    protected void cmbSelectsubject_SelectedIndexChanged(object sender, EventArgs e)
    {
        LoadChapter(cmbSelectsubject.SelectedValue);
    }
    private void LoadChapter(string SubjectID)
    {
        if (cmbSelectsubject.SelectedIndex == cmbSelectsubject.Items.Count - 1)
        {
            ScriptManager.RegisterStartupScript(this, typeof(Page), "msg", "alert('Please Select Sujject.')", true);
            ChkSelectALL.Checked = false;
            ddlChapter.Items.Clear();
            ChkSelectALL.Visible = false;

        }
        else
        {
            string SQl = "select Chapter_id from dbo.tblAssignExamChapter where Subject_id=" + SubjectID + " and TestID=" + ddltextName.SelectedValue + "";
            string Id = Convert.ToString(cc.ExecuteScalar(SQl));
            if (Id == "")
            {
                ddlChapter.Items.Clear();
                ChkSelectALL.Visible = false;

            }
            else
            {
                Sql = "select Name,ItemValueId from dbo.tblItemValue where ItemId=3 and ItemValueId in(" + Id + ")";
                DataSet ds = cc.ExecuteDataset(Sql);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ddlChapter.DataSource = ds.Tables[0];
                    ddlChapter.DataTextField = "Name";
                    ddlChapter.DataValueField = "ItemValueId";
                    ddlChapter.DataBind();
                    ChkSelectALL.Checked = false;
                    ChkSelectALL.Visible = true;

                }
            }
        }
    }
    public void loadTestName()
    {
        testDefBAL.LoginId1 = Convert.ToString(Session["LoginId"]);  //use sp
        testDefBAL.GroupOfQuestion1 = "0";

        DataSet ds = testDefBAL.TestbyGroupofQuesLoginId5(testDefBAL);

        if (ds.Tables[0].Rows.Count > 0)
        {
            ddltextName.DataSource = ds.Tables[0];
            ddltextName.DataTextField = "Exam_name";
            ddltextName.DataValueField = "Test_ID";
            ddltextName.DataBind();
            ddltextName.Items.Add("--Select--");
            ddltextName.SelectedIndex = ddltextName.Items.Count - 1;
            cmbSelectsubject.Items.Add("--Select--");
            cmbSelectsubject.SelectedIndex = cmbSelectsubject.Items.Count - 1;
        }
    }
    public void loadSubject()
    {
        Sql = "select Name,ItemValueId from dbo.tblItemValue where ItemId =0 or ItemId=2";
        DataSet ds = cc.ExecuteDataset(Sql);
        cmbSelectsubject.DataSource = ds.Tables[0];
        cmbSelectsubject.DataTextField = "Name";
        cmbSelectsubject.DataValueField = "ItemValueId";
        cmbSelectsubject.DataBind();
    }
    public void loadChapter()
    {
        Sql = "select Name,ItemValueId from dbo.tblItemValue where ItemId=3";
        DataSet ds = cc.ExecuteDataset(Sql);
        ddlChapter.DataSource = ds.Tables[0];
        ddlChapter.DataTextField = "Name";
        ddlChapter.DataValueField = "ItemValueId";
        ddlChapter.DataBind();

    }


    protected void gvBindQuestions_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvBindQuestions.PageIndex = e.NewPageIndex;
        BindGrid();
    }
    protected void ChkSelectALL_CheckedChanged(object sender, EventArgs e)
    {
        if (ChkSelectALL.Checked == true)
        {

            foreach (ListItem li in ddlChapter.Items)
            {
                li.Selected = true;
            }
        }
        else
        {
            foreach (ListItem li in ddlChapter.Items)
            {
                li.Selected = false;

            }
        }
    }



    protected void btnBack1_Click(object sender, EventArgs e)
    {
        MultiView1.ActiveViewIndex = 0;
    }
   
}